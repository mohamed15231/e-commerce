import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:mealapp/layout/cubit/states.dart';
import 'package:mealapp/models/favorites.dart';
import 'package:mealapp/models/home_page.dart';
import 'package:mealapp/modules/categories/categories.dart';
import 'package:mealapp/modules/favorites/favorites.dart';
import 'package:mealapp/modules/home/home.dart';
import 'package:mealapp/shared/components/constant/constant.dart';
import 'package:mealapp/shared/endpoints.dart';
import 'package:mealapp/shared/network/dio.dart';

import '../../models/category_model.dart';
import '../../models/get_favorite_model.dart';
import '../../models/login_shop_model.dart';
import '../../modules/settings/settings.dart';

class ShopAppCubit extends Cubit<ShopAppStates> {
  ShopAppCubit() : super(InitialShopAppState());

  static ShopAppCubit get(context) => BlocProvider.of(context);

  List<Widget> screen = [
    const HomePage(),
    const Categories(),
    const Favorite(),
     Settings(),
  ];
  int currentIndex = 0;

  void changeNavBar({required int currentIndex}) {
    this.currentIndex = currentIndex;
    emit(ChangeNavBarState());
  }

  HomePageModels? homePage;
  Map<int, bool> favorite = {};

  void getHomePage() {
    emit(LoadingHomePageState());
    DioHelper.getData(url: home, token: token).then((value) {
      homePage = HomePageModels.fromjson(json: value.data);
      homePage!.data!.product.forEach((element) {
        favorite.addAll({element.id!: element.inFavorites!});
      });
      emit(SuccessHomePageState());
    }).catchError((error) {
      print(error);
      emit(ErrorHomePageState());
    });
  }

  bool isDone=true;
  void notDone(){
    isDone=false;
    emit(NotDoneState());
  }
  void done(){
    isDone=false;
    emit(DoneState());
  }

  late FavoriteModel favoriteModel;

  void changeFavorite({
    required int productId,
  }) {
    favorite[productId] = favorite[productId] == true ? false : true;
    emit(SuccessState());
    DioHelper.postData(
      url: FAVORITE,
      token: token,
      data: {
        "product_id": productId,
      },
    ).then((value) {
      favoriteModel = FavoriteModel.json(json: value.data);
      if (favoriteModel.status == false) {
        favorite[productId] = favorite[productId] == true ? false : true;
      }else{
        getFavorite();

      }

      emit(SuccessFavoriteState(favoriteModel));
    }).catchError((error) {
      favorite[productId] = favorite[productId] == true ? false : true;

      print(error);

      emit(ErrorFavoriteState());
    });
  }
  late Autogenerated getFavList;
  void getFavorite() {
    emit(GetFavoriteLoadingState());
    DioHelper.getData(
      url: FAVORITE,
      token: token,
    ).then((value) {
      getFavList=Autogenerated.fromJson(value.data);
      emit(GetFavoriteSuccessState());
    }).catchError((error){
      print(error);
      emit(GetFavoriteSuccessState());
    });
  }

  CategoryModel? category;

  void getCategory() {
    DioHelper.getData(url: CATEGORY, token: token).then((value) {
      category = CategoryModel.getJson(value.data);
      emit(SuccessCategoryState());
    }).catchError((error) {
      print(error);
      emit(ErrorCategoryState());
    });
  }

  late LogInModel profile;

  void getProfile() {
    DioHelper.getData(url: PROFILE, token: token).then((value) {
      emit(GetProfileLoadingState());

      profile = LogInModel.jsonData(value.data);
      emit(GetProfileSuccessState());
    }).catchError((error) {
      print(error);
      emit(GetProfileErrorState());
    });
  }

  void upDateProfile({
  required String name,
  required String phone,
  required String email,
}) {
    DioHelper.upData(url: UPDATE_PROFILE, token: token, data:{
      "name":name,
      "phone":phone,
      "email":email,
    }).then((value) {
      emit(UpDateLoadingState());

      profile = LogInModel.jsonData(value.data);
      emit(UpDateSuccessState(profile));
    }).catchError((error) {
      print(error);
      emit(UpDateErrorState());
    });
  }

  bool isEdit=false;



  void edit(){
    isEdit=!isEdit;
    emit(ChangeEditState());

  }
}
